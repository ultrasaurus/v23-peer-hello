// This file was auto-generated by the vanadium vdl tool.
// Package: ifc

package ifc

import (
	"v.io/v23"
	"v.io/v23/context"
	"v.io/v23/rpc"
)

var _ = __VDLInit() // Must be first; see __VDLInit comments for details.

//////////////////////////////////////////////////
// Interface definitions

// HelloClientMethods is the client interface
// containing Hello methods.
type HelloClientMethods interface {
	// Returns a greeting.
	Get(*context.T, ...rpc.CallOpt) (greeting string, _ error)
}

// HelloClientStub adds universal methods to HelloClientMethods.
type HelloClientStub interface {
	HelloClientMethods
	rpc.UniversalServiceMethods
}

// HelloClient returns a client stub for Hello.
func HelloClient(name string) HelloClientStub {
	return implHelloClientStub{name}
}

type implHelloClientStub struct {
	name string
}

func (c implHelloClientStub) Get(ctx *context.T, opts ...rpc.CallOpt) (o0 string, err error) {
	err = v23.GetClient(ctx).Call(ctx, c.name, "Get", nil, []interface{}{&o0}, opts...)
	return
}

// HelloServerMethods is the interface a server writer
// implements for Hello.
type HelloServerMethods interface {
	// Returns a greeting.
	Get(*context.T, rpc.ServerCall) (greeting string, _ error)
}

// HelloServerStubMethods is the server interface containing
// Hello methods, as expected by rpc.Server.
// There is no difference between this interface and HelloServerMethods
// since there are no streaming methods.
type HelloServerStubMethods HelloServerMethods

// HelloServerStub adds universal methods to HelloServerStubMethods.
type HelloServerStub interface {
	HelloServerStubMethods
	// Describe the Hello interfaces.
	Describe__() []rpc.InterfaceDesc
}

// HelloServer returns a server stub for Hello.
// It converts an implementation of HelloServerMethods into
// an object that may be used by rpc.Server.
func HelloServer(impl HelloServerMethods) HelloServerStub {
	stub := implHelloServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := rpc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := rpc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implHelloServerStub struct {
	impl HelloServerMethods
	gs   *rpc.GlobState
}

func (s implHelloServerStub) Get(ctx *context.T, call rpc.ServerCall) (string, error) {
	return s.impl.Get(ctx, call)
}

func (s implHelloServerStub) Globber() *rpc.GlobState {
	return s.gs
}

func (s implHelloServerStub) Describe__() []rpc.InterfaceDesc {
	return []rpc.InterfaceDesc{HelloDesc}
}

// HelloDesc describes the Hello interface.
var HelloDesc rpc.InterfaceDesc = descHello

// descHello hides the desc to keep godoc clean.
var descHello = rpc.InterfaceDesc{
	Name:    "Hello",
	PkgPath: "ifc",
	Methods: []rpc.MethodDesc{
		{
			Name: "Get",
			Doc:  "// Returns a greeting.",
			OutArgs: []rpc.ArgDesc{
				{"greeting", ``}, // string
			},
		},
	},
}

var __VDLInitCalled bool

// __VDLInit performs vdl initialization.  It is safe to call multiple times.
// If you have an init ordering issue, just insert the following line verbatim
// into your source files in this package, right after the "package foo" clause:
//
//    var _ = __VDLInit()
//
// The purpose of this function is to ensure that vdl initialization occurs in
// the right order, and very early in the init sequence.  In particular, vdl
// registration and package variable initialization needs to occur before
// functions like vdl.TypeOf will work properly.
//
// This function returns a dummy value, so that it can be used to initialize the
// first var in the file, to take advantage of Go's defined init order.
func __VDLInit() struct{} {
	if __VDLInitCalled {
		return struct{}{}
	}
	__VDLInitCalled = true

	return struct{}{}
}
